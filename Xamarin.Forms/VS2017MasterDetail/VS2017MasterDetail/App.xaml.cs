using System;

using VS2017MasterDetail.Views;
using Xamarin.Forms;

//CODEBRIX-CONVERSION-NOTE: The CodeBrix.Forms NuGet package (and all dependencies) were added
//  to all projects in this solution, in order to use CodeBrix for Xamarin.Forms functionality.

//CODEBRIX-CONVERSION-NOTE: Additional usings required for CodeBrix and the code added below -
using CodeBrix;
using VS2017MasterDetail.ViewModels;

namespace VS2017MasterDetail
{
    //CODEBRIX-CONVERSION-NOTE: Previously, the App class inherited from (Xamarin.Forms.)Application -
    //  now inheriting from CodeBrixApplication
    public partial class App : CodeBrixApplication
	{
        //CODEBRIX-CONVERSION-NOTE: The original App() constructor (commented out below) was replaced
        // with this standard constructor - and the InitializeComponent() call and navigate-to-MainPage 
        // logic has been moved to the (new) overridden OnInitialized() method.
	    public App(IPlatformConfiguration config = null) : base(config) { }

        protected override void OnInitialized()
	    {
	        InitializeComponent();
	        NavigationService.NavigateAsync(nameof(MainPage));
	    }

        //public App ()
        //{
        //	InitializeComponent();
        //
        //    MainPage = new MainPage();
        //}

        //CODEBRIX-CONVERSION-NOTE: The main App class (inherited from CodeBrixApplication) also needs
        // to override the RegisterTypes() method - this is where our pages are registered for navigation
        // and our shared platform specific services are registered (platform-specific services have to be
        // registered in the platform projects: in AppDelegate (for iOS), MainActivity (for Android), etc.)
        protected override void RegisterTypes(ICodeBrixContainer container)
        {
            container.RegisterForNavigation<MainPage>();
            container.RegisterForNavigation<AboutPage, AboutViewModel>();
	        container.RegisterForNavigation<ItemDetailPage, ItemDetailViewModel>();
	        container.RegisterForNavigation<ItemsPage, ItemsViewModel>();
	        container.RegisterForNavigation<NewItemPage, NewItemViewModel>();

            //We might choose to register the MockDataStore with the container here - as our implementation 
            // of IDataStore<Item> - using a line of code like the commented-out one below.
            // However, in this sample app - as generated by Visual Studio - the MockDataStore is already
            // registered with the Xamarin.Forms.DependencyService, so our CodeBrixContainer will already be
            // able to resolve it.
	        //container.Register(() => new MockDataStore(), typeof(IDataStore<Models.Item>));
	    }

	    //CODEBRIX-CONVERSION-NOTE: This sample app does not use any CodeBrix modules (e.g. Photos, LocalDatabase, 
	    // etc.) - but if it needed to they would be registered here.
	    protected override void RegisterModules(ICodeBrixContainer container)
	    {
	        //Register any implementations of ICodeBrixModule here
        }

        protected override void OnStart ()
		{
			// Handle when your app starts
		}

		protected override void OnSleep ()
		{
			// Handle when your app sleeps
		}

		protected override void OnResume ()
		{
			// Handle when your app resumes
		}
	}
}
